# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'mail.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from re import L
from socket import socket
import pandas as pd

from PyQt5 import QtCore, QtGui, QtWidgets

from htmlParser import dictSubHtml, html2list
from gmailController import create_message_with_files, create_service, send_msg

TITLE = "Automate Mails Sender 2.0"
CREDIT = "Create By Ratchapol Chantarachote for TEDxKasetsartU (Last Update: 20220615)"


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(847, 656)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.centralwidget)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.verticalLayout.setObjectName("verticalLayout")
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.widget = QtWidgets.QWidget(self.centralwidget)
        self.widget.setObjectName("widget")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.widget)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.html_editor_label = QtWidgets.QLabel(self.widget)
        self.html_editor_label.setObjectName("html_editor_label")
        self.verticalLayout_3.addWidget(self.html_editor_label)
        self.html_editor = QtWidgets.QTextEdit(self.widget)
        self.html_editor.setObjectName("html_editor")
        self.verticalLayout_3.addWidget(self.html_editor)
        self.horizontalLayout.addWidget(self.widget)
        self.line = QtWidgets.QFrame(self.centralwidget)
        self.line.setFrameShape(QtWidgets.QFrame.VLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setObjectName("line")
        self.horizontalLayout.addWidget(self.line)
        self.widget_2 = QtWidgets.QWidget(self.centralwidget)
        self.widget_2.setObjectName("widget_2")
        self.verticalLayout_4 = QtWidgets.QVBoxLayout(self.widget_2)
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.mails_list_label = QtWidgets.QLabel(self.widget_2)
        self.mails_list_label.setObjectName("mails_list_label")
        self.verticalLayout_4.addWidget(self.mails_list_label)
        self.mails_and_param_list = QtWidgets.QTableWidget(self.widget_2)
        self.mails_and_param_list.setObjectName("mails_and_param_list")
        self.mails_and_param_list.setColumnCount(0)
        self.mails_and_param_list.setRowCount(0)
        self.verticalLayout_4.addWidget(self.mails_and_param_list)
        self.attachments_list_label = QtWidgets.QLabel(self.widget_2)
        self.attachments_list_label.setObjectName("attachments_list_label")
        self.verticalLayout_4.addWidget(self.attachments_list_label)
        self.attachments_list = QtWidgets.QTableWidget(self.widget_2)
        self.attachments_list.setObjectName("attachments_list")
        self.attachments_list.setColumnCount(0)
        self.attachments_list.setRowCount(0)
        self.verticalLayout_4.addWidget(self.attachments_list)
        self.horizontalLayout.addWidget(self.widget_2)
        self.horizontalLayout.setStretch(0, 50)
        self.horizontalLayout.setStretch(2, 50)
        self.verticalLayout.addLayout(self.horizontalLayout)
        self.line_2 = QtWidgets.QFrame(self.centralwidget)
        self.line_2.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_2.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_2.setObjectName("line_2")
        self.verticalLayout.addWidget(self.line_2)
        self.verticalLayout_2.addLayout(self.verticalLayout)
        self.widget_3 = QtWidgets.QWidget(self.centralwidget)
        self.widget_3.setObjectName("widget_3")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.widget_3)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.gg_scc_reset_btn = QtWidgets.QPushButton(self.widget_3)
        self.gg_scc_reset_btn.setObjectName("gg_scc_reset_btn")
        self.horizontalLayout_2.addWidget(self.gg_scc_reset_btn)
        self.verticalLayout_6 = QtWidgets.QVBoxLayout()
        self.verticalLayout_6.setObjectName("verticalLayout_6")
        self.html_template_import_btn = QtWidgets.QPushButton(self.widget_3)
        self.html_template_import_btn.setObjectName("html_template_import_btn")
        self.verticalLayout_6.addWidget(self.html_template_import_btn)
        self.csv_import_btn = QtWidgets.QPushButton(self.widget_3)
        self.csv_import_btn.setObjectName("csv_import_btn")
        self.verticalLayout_6.addWidget(self.csv_import_btn)
        self.attachments_import_btn = QtWidgets.QPushButton(self.widget_3)
        self.attachments_import_btn.setObjectName("attachments_import_btn")
        self.verticalLayout_6.addWidget(self.attachments_import_btn)
        self.horizontalLayout_2.addLayout(self.verticalLayout_6)
        self.html_parse_btn = QtWidgets.QPushButton(self.widget_3)
        self.html_parse_btn.setObjectName("html_parse_btn")
        self.horizontalLayout_2.addWidget(self.html_parse_btn)
        self.verticalLayout_5 = QtWidgets.QVBoxLayout()
        self.verticalLayout_5.setObjectName("verticalLayout_5")
        self.send_mails_btn = QtWidgets.QPushButton(self.widget_3)
        self.send_mails_btn.setObjectName("send_mails_btn")
        self.verticalLayout_5.addWidget(self.send_mails_btn)
        self.test_checkbox = QtWidgets.QCheckBox(self.widget_3)
        self.test_checkbox.setObjectName("test_checkbox")
        self.verticalLayout_5.addWidget(self.test_checkbox)
        self.horizontalLayout_2.addLayout(self.verticalLayout_5)
        self.verticalLayout_2.addWidget(self.widget_3)
        self.progressBar = QtWidgets.QProgressBar(self.centralwidget)
        self.progressBar.setProperty("value", 0)
        self.progressBar.setObjectName("progressBar")
        self.verticalLayout_2.addWidget(self.progressBar)
        self.credit_label = QtWidgets.QLabel(self.centralwidget)
        self.credit_label.setObjectName("credit_label")
        self.verticalLayout_2.addWidget(self.credit_label)
        self.verticalLayout_2.setStretch(0, 80)
        self.verticalLayout_2.setStretch(1, 20)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 847, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", TITLE))
        self.html_editor_label.setText(_translate("MainWindow", "HTML Editor"))
        self.html_editor.setStatusTip(_translate("MainWindow", "HTML Editor"))
        self.html_editor.setHtml(
            _translate(
                "MainWindow",
                '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd">\n'
                '<html><head><meta name="qrichtext" content="1" /><style type="text/css">\n'
                "p, li { white-space: pre-wrap; }\n"
                "</style></head><body style=\" font-family:'MS Shell Dlg 2'; font-size:8.25pt; font-weight:400; font-style:normal;\">\n"
                '<p style="-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><br /></p></body></html>',
            )
        )
        self.widget_2.setStatusTip(_translate("MainWindow", "Mail List Table"))
        self.mails_list_label.setText(
            _translate("MainWindow", "Mails and Parameters List")
        )
        self.mails_and_param_list.setStatusTip(
            _translate("MainWindow", "Mails and Parameters Config.")
        )
        self.attachments_list_label.setText(
            _translate("MainWindow", "Attachments List")
        )
        self.attachments_list.setStatusTip(_translate("MainWindow", "Attachments List"))
        self.gg_scc_reset_btn.setStatusTip(
            _translate("MainWindow", "Change or Set Google Account (to sent the email)")
        )
        self.gg_scc_reset_btn.setText(
            _translate("MainWindow", "Change/Set Google Account")
        )
        self.html_template_import_btn.setStatusTip(
            _translate("MainWindow", "Import HTML Template")
        )
        self.html_template_import_btn.setText(
            _translate("MainWindow", "Import HTML Template")
        )
        self.csv_import_btn.setStatusTip(
            _translate("MainWindow", "Import Mails CSV (Receivers)")
        )
        self.csv_import_btn.setText(_translate("MainWindow", "Import Mails CSV"))
        self.attachments_import_btn.setStatusTip(
            _translate("MainWindow", "Import Attachments CSV")
        )
        self.attachments_import_btn.setText(
            _translate("MainWindow", "Import Attachments CSV")
        )
        self.html_parse_btn.setStatusTip(
            _translate("MainWindow", "Parse HTML for Parameters")
        )
        self.html_parse_btn.setText(_translate("MainWindow", "Parse HTML"))
        self.send_mails_btn.setStatusTip(
            _translate("MainWindow", "Send Mail to All Receivers")
        )
        self.send_mails_btn.setText(_translate("MainWindow", "Send E-Mail"))
        self.test_checkbox.setStatusTip(
            _translate(
                "MainWindow", "Test Mode (Ouput'll be total number of all receivers.)"
            )
        )
        self.test_checkbox.setText(_translate("MainWindow", "Test"))
        self.progressBar.setStatusTip(_translate("MainWindow", "Progress Bar"))
        self.credit_label.setStatusTip(_translate("MainWindow", "Credit"))
        self.credit_label.setText(_translate("MainWindow", CREDIT))
        self.gg_scc_reset_btn.clicked.connect(self.resetGGAcc)
        self.html_template_import_btn.clicked.connect(self.openHTML)
        self.csv_import_btn.clicked.connect(self.openMailCSV)
        self.attachments_import_btn.clicked.connect(self.openAttachmentsCSV)
        self.html_parse_btn.clicked.connect(self.parseHTML)
        self.send_mails_btn.clicked.connect(self.sendMails)

    def openHTML(self):
        path, check = QtWidgets.QFileDialog.getOpenFileName(
            None, "Import a HTML Template", "", "html (*.html)"
        )
        if check:
            with open(path, "rt", encoding="utf-8-sig") as f:
                data = f.read()
                self.html_editor.setPlainText(data)

    def openMailCSV(self):
        path, check = QtWidgets.QFileDialog.getOpenFileName(
            None, "Import a Mails List", "", "csv (*.csv)"
        )
        if check:
            df = pd.read_csv(path, header=None, delimiter=",")
            self.mails_and_param_list.setColumnCount(2)
            self.mails_and_param_list.setRowCount(len(df.index) + 1)

            for i in range(len(df.index) + 1):
                self.mails_and_param_list.setItem(
                    i,
                    0,
                    QtWidgets.QTableWidgetItem(
                        str(df.iat[i - 1, 0]).strip() if i != 0 else "Mail"
                    ),
                )
                if i == 0:
                    self.mails_and_param_list.setItem(
                        i, 1, QtWidgets.QTableWidgetItem("Subject")
                    )

    def openAttachmentsCSV(self):
        path, check = QtWidgets.QFileDialog.getOpenFileName(
            None, "Import a Attachments List", "", "csv (*.csv)"
        )
        if check:
            df = pd.read_csv(path, header=None, delimiter=",")
            self.attachments_list.setColumnCount(2)
            self.attachments_list.setRowCount(len(df.index) + 1)

            for i in range(len(df.index) + 1):
                self.attachments_list.setItem(
                    i,
                    0,
                    QtWidgets.QTableWidgetItem(
                        str(df.iat[i - 1, 0]).strip() if i != 0 else "File"
                    ),
                )
                self.attachments_list.setItem(
                    i,
                    1,
                    QtWidgets.QTableWidgetItem(
                        str(df.iat[i - 1, 1]).strip() if i != 0 else "Mode"
                    ),
                )

    def resetGGAcc(self):
        global CREDENTIALS_FILENAME

        self.g = create_service(CREDENTIALS_FILENAME)

    def parseHTML(self):
        param_lst = html2list(self.html_editor.toPlainText())
        self.mails_and_param_list.setColumnCount(len(param_lst) + 2)

        for i in range(2, len(param_lst) + 2):
            self.mails_and_param_list.setItem(
                0, i, QtWidgets.QTableWidgetItem(str(param_lst[i - 2]))
            )

    def setDisabledAll(self, val):
        self.html_editor.setDisabled(val)
        self.mails_and_param_list.setDisabled(val)
        self.gg_scc_reset_btn.setDisabled(val)
        self.html_template_import_btn.setDisabled(val)
        self.csv_import_btn.setDisabled(val)
        self.attachments_import_btn.setDisabled(val)
        self.html_parse_btn.setDisabled(val)
        self.send_mails_btn.setDisabled(val)
        self.test_checkbox.setDisabled(val)

    def getAttachmentsList(self):
        res = []
        for row in range(1, self.attachments_list.rowCount()):
            res.append(
                (self.attachments_list.item(row, 0).text(), self.attachments_list.item(row, 1).text())
            )
        return res

    def sendMails(self):
        self.setDisabledAll(True)
        count = 0
        total = self.mails_and_param_list.rowCount() - 1
        if total != 0:
            self.progressBar.setProperty("value", count / total * 100)
            for row in range(1, self.mails_and_param_list.rowCount()):
                param_dct = {}
                for col in range(2, self.mails_and_param_list.columnCount()):
                    param_dct[
                        self.mails_and_param_list.item(0, col).text()
                    ] = self.mails_and_param_list.item(row, col).text()

                parsed_html = dictSubHtml(self.html_editor.toPlainText(), param_dct)
                subject = self.mails_and_param_list.item(row, 1).text()
                email = self.mails_and_param_list.item(row, 0).text()
                att_list = self.getAttachmentsList()

                content = create_message_with_files(email, subject, parsed_html, att_list)

                if self.test_checkbox.isChecked():
                    text = f"\n\ntest {email}\nSubject: {subject}\n{parsed_html}\n\n"
                else:
                    try:
                        res = send_msg(self.g, "me", content)
                    except socket.timeout:
                        print("alert")
                        return
                    text = f"sent to {email} with res: {res}"

                print(text)
                self.statusbar.showMessage(text)

                count += 1
                self.progressBar.setProperty("value", count / total * 100)
            if self.test_checkbox.isChecked():
                print(f"Sent: {count} from Total: {total}")

        self.setDisabledAll(False)

        self.statusbar.showMessage(f"Done! ({count} sent)")


if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)

    if "-n" not in sys.argv or "--no-first-login" not in sys.argv:
        path, check = QtWidgets.QFileDialog.getOpenFileName(
            None, "Open a file", "", "json (*.json)"
        )
        if check:
            CREDENTIALS_FILENAME = path
        ui.resetGGAcc()

    MainWindow.show()
    sys.exit(app.exec_())
